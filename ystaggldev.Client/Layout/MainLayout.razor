@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudSwipeArea OnSwipeEnd="@OnSwipeEnd" Style="width: 100%; height: 100%">
<MudLayout>
    <MudAppBar Elevation="1" >
        <MudNavLink Href="/" Match="NavLinkMatch.All">
            <MudText Typo="Typo.h5" Class="d-none d-md-flex justify-start ml-3">ystaggl<span class="mud-secondary-text">.dev</span></MudText>
            <MudText Typo="Typo.h5" Class="d-flex d-md-none justify-center ml-3">ystaggl<span class="mud-secondary-text">.dev</span></MudText>
        </MudNavLink>
        <NavMenu Class="ml-20 d-none d-md-flex"/>
    </MudAppBar>

    
    <MudDrawer @bind-Open="@_drawerOpen" Fixed="true" Elevation="1" Variant="@DrawerVariant.Persistent">
        <MudDrawerHeader>
            <MudNavLink Href="/" Match="NavLinkMatch.All">
            <MudText Typo="Typo.h5">ystaggl<span class="mud-secondary-text">.dev</span></MudText>
            </MudNavLink>
        </MudDrawerHeader>
        <MudNavMenu>
            <NavMenu />
        </MudNavMenu>
    </MudDrawer>
    
    <MudMainContent Class="mt-16 pa-4" Style="min-height: 70vh">
        @Body
    </MudMainContent>
    <Footer />
</MudLayout>
</MudSwipeArea>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }


    public void OnSwipeEnd(SwipeEventArgs e)

    {

        if (e.SwipeDirection == SwipeDirection.LeftToRight && !_drawerOpen)

        {

            _drawerOpen = true;

            StateHasChanged();

        }

        else if (e.SwipeDirection == SwipeDirection.RightToLeft && _drawerOpen)

        {



            _drawerOpen = false;

            StateHasChanged();

        }

    }



    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


